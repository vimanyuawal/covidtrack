{"ast":null,"code":"var _jsxFileName = \"/Users/vimanyuawal/my-app/src/Company/Company.js\";\nimport React, { Component } from 'react';\nimport { wait } from '@testing-library/react';\nimport Plot from 'react-plotly.js';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport Chart from \"chart.js\"; // import classes from \"./LineGraph.module.css\";\n\nclass Company extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getUS_Timeline() {\n    fetch('https://cors-anywhere.herokuapp.com/https://thevirustracker.com/free-api?countryTimeline=US').then(res => res.json()).then(result => {\n      // console.log(result);\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      console.log('Could not access data');\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getUS_Timeline();\n  }\n\n  arrangeForGraph() {\n    var data = this.state.items;\n    var objectArray = [];\n    var day = 1;\n\n    for (var key in data['timelineitems'][0]) {\n      var date = new Date(key);\n      var obj = {\n        new_daily_deaths: data['timelineitems'][0][key]['new_daily_deaths'],\n        new_daily_cases: data['timelineitems'][0][key]['new_daily_cases'],\n        dates: date,\n        day: day\n      };\n      objectArray.push(obj);\n      day += 1;\n    }\n\n    objectArray.pop();\n    return objectArray;\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (isLoaded) {\n      var data = this.arrangeForGraph(items);\n      console.log(data);\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: data.dates,\n          datasets: [{\n            label: \"Daily Cases\",\n            data: data.new_daily_cases,\n            backgroundColor: ['rgba(105, 0, 132, .2)'],\n            borderColor: ['rgba(200, 99, 132, .7)'],\n            borderWidth: 2\n          }, {\n            label: \"Daily Deaths\",\n            data: data.new_daily_deaths,\n            backgroundColor: ['rgba(0, 137, 132, .2)'],\n            borderColor: ['rgba(0, 10, 130, .7)'],\n            borderWidth: 2\n          }]\n        },\n        options: {\n          //Customize chart options\n          responsive: true\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LineChart, {\n        width: 500,\n        height: 300,\n        data: data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(XAxis, {\n        dataKey: \"dates\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(YAxis, {\n        dataKey: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(CartesianGrid, {\n        stroke: \"#efe\",\n        strokeDasharray: \"5 5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: \"new_daily_cases\",\n        stroke: \"#8884d8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: \"new_daily_deaths\",\n        stroke: \"#82ca9d\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.graphContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"canvas\", {\n        id: \"myChart\",\n        ref: this.chartRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, \"Loading graph...\");\n  }\n\n}\n\nexport default Company;","map":{"version":3,"sources":["/Users/vimanyuawal/my-app/src/Company/Company.js"],"names":["React","Component","wait","Plot","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Chart","Company","constructor","props","state","error","isLoaded","items","getUS_Timeline","fetch","then","res","json","result","setState","console","log","componentDidMount","arrangeForGraph","data","objectArray","day","key","date","Date","obj","new_daily_deaths","new_daily_cases","dates","push","pop","render","myChartRef","chartRef","current","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","classes","graphContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SACEC,SADF,EACaC,IADb,EACmBC,KADnB,EAC0BC,KAD1B,EACiCC,aADjC,EACgDC,OADhD,EACyDC,MADzD,QAEO,UAFP;AAIA,OAAOC,KAAP,MAAkB,UAAlB,C,CACA;;AAIA,MAAMC,OAAN,SAAsBX,SAAtB,CAAgC;AAE5BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACnB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,cAAc,GAAG;AACfC,IAAAA,KAAK,CAAC,6FAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACV;AACA,WAAKC,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,KAAK,EAAEM;AAFK,OAAd;AAID,KATL,EAUI;AACA;AACA;AACCR,IAAAA,KAAD,IAAW;AACTU,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAKF,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAnBL;AAqBD;;AAEDY,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,cAAL;AACD;;AAEDU,EAAAA,eAAe,GAAG;AAChB,QAAIC,IAAI,GAAG,KAAKf,KAAL,CAAWG,KAAtB;AACA,QAAIa,WAAW,GAAG,EAAlB;AACA,QAAIC,GAAG,GAAG,CAAV;;AAEA,SAAI,IAAIC,GAAR,IAAeH,IAAI,CAAC,eAAD,CAAJ,CAAsB,CAAtB,CAAf,EAAyC;AACvC,UAAII,IAAI,GAAG,IAAIC,IAAJ,CAASF,GAAT,CAAX;AAEA,UAAIG,GAAG,GAAG;AACFC,QAAAA,gBAAgB,EAACP,IAAI,CAAC,eAAD,CAAJ,CAAsB,CAAtB,EAAyBG,GAAzB,EAA8B,kBAA9B,CADf;AAEFK,QAAAA,eAAe,EAACR,IAAI,CAAC,eAAD,CAAJ,CAAsB,CAAtB,EAAyBG,GAAzB,EAA8B,iBAA9B,CAFd;AAGFM,QAAAA,KAAK,EAACL,IAHJ;AAIFF,QAAAA,GAAG,EAAEA;AAJH,OAAV;AAMAD,MAAAA,WAAW,CAACS,IAAZ,CAAiBJ,GAAjB;AACAJ,MAAAA,GAAG,IAAI,CAAP;AACD;;AAEDD,IAAAA,WAAW,CAACU,GAAZ;AAEA,WAAOV,WAAP;AAED;;AAGDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1B,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;;AACA,QAAGE,QAAH,EAAa;AACX,UAAIa,IAAI,GAAG,KAAKD,eAAL,CAAqBX,KAArB,CAAX;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AAEA,YAAMa,UAAU,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,UAAInC,KAAJ,CAAUgC,UAAV,EAAsB;AAClBI,QAAAA,IAAI,EAAE,MADY;AAElBjB,QAAAA,IAAI,EAAE;AACF;AACAkB,UAAAA,MAAM,EAAElB,IAAI,CAACS,KAFX;AAGFU,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,KAAK,EAAE,aADX;AAEIpB,YAAAA,IAAI,EAAEA,IAAI,CAACQ,eAFf;AAGIa,YAAAA,eAAe,EAAE,CACjB,uBADiB,CAHrB;AAMIC,YAAAA,WAAW,EAAE,CACb,wBADa,CANjB;AASIC,YAAAA,WAAW,EAAE;AATjB,WADM,EAYN;AACEH,YAAAA,KAAK,EAAE,cADT;AAEEpB,YAAAA,IAAI,EAAEA,IAAI,CAACO,gBAFb;AAGEc,YAAAA,eAAe,EAAE,CACjB,uBADiB,CAHnB;AAMEC,YAAAA,WAAW,EAAE,CACb,sBADa,CANf;AASEC,YAAAA,WAAW,EAAE;AATf,WAZM;AAHR,SAFY;AA+BlBC,QAAAA,OAAO,EAAE;AACL;AACAC,UAAAA,UAAU,EAAE;AAFP;AA/BS,OAAtB;AAuCA,0BACU;AAAK,QAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,GAAlB;AAAuB,QAAA,MAAM,EAAE,GAA/B;AAAoC,QAAA,IAAI,EAAEzB,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAGE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAC,MAAtB;AAA6B,QAAA,eAAe,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,eAIE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,iBAA9B;AAAgD,QAAA,MAAM,EAAC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,eAKE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,kBAA9B;AAAiD,QAAA,MAAM,EAAC,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADJ,eASI;AAAK,QAAA,SAAS,EAAE0B,OAAO,CAACC,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,EAAE,EAAC,SADP;AAEI,QAAA,GAAG,EAAE,KAAKb,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,CADV;AAoBD;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ;AAGD;;AAxI6B;;AA4IhC,eAAehC,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport { wait } from '@testing-library/react';\nimport Plot from 'react-plotly.js';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nimport Chart from \"chart.js\";\n// import classes from \"./LineGraph.module.css\";\n\n\n\nclass Company extends Component {\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getUS_Timeline() {\n    fetch('https://cors-anywhere.herokuapp.com/https://thevirustracker.com/free-api?countryTimeline=US')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          // console.log(result);\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log('Could not access data');\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  componentDidMount() {\n    this.getUS_Timeline();\n  }\n\n  arrangeForGraph() {\n    var data = this.state.items;\n    var objectArray = [];\n    var day = 1;\n    \n    for(var key in data['timelineitems'][0]) {\n      var date = new Date(key);\n\n      var obj = {\n              new_daily_deaths:data['timelineitems'][0][key]['new_daily_deaths'],\n              new_daily_cases:data['timelineitems'][0][key]['new_daily_cases'],\n              dates:date,\n              day: day\n            }\n      objectArray.push(obj);\n      day += 1;\n    } \n\n    objectArray.pop();\n    \n    return objectArray;\n\n  }\n\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if(isLoaded) {\n      var data = this.arrangeForGraph(items);\n      console.log(data);\n\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n        \n      new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n              //Bring in data\n              labels: data.dates,\n              datasets: [\n                  {\n                      label: \"Daily Cases\",\n                      data: data.new_daily_cases,\n                      backgroundColor: [\n                      'rgba(105, 0, 132, .2)',\n                      ],\n                      borderColor: [\n                      'rgba(200, 99, 132, .7)',\n                      ],\n                      borderWidth: 2\n                  },\n                  {\n                    label: \"Daily Deaths\",\n                    data: data.new_daily_deaths,\n                    backgroundColor: [\n                    'rgba(0, 137, 132, .2)',\n                    ],\n                    borderColor: [\n                    'rgba(0, 10, 130, .7)',\n                    ],\n                    borderWidth: 2\n                  }\n\n              ]\n          },\n          options: {\n              //Customize chart options\n              responsive: true\n          }\n      });\n\n\n\n      return (\n                <div className = \"chart\">\n                    <LineChart width={500} height={300} data={data}>\n                      <XAxis dataKey=\"dates\"/>\n                      <YAxis dataKey=\"\"/>\n                      <CartesianGrid stroke=\"#efe\" strokeDasharray=\"5 5\"/>\n                      <Line type=\"monotone\" dataKey=\"new_daily_cases\" stroke=\"#8884d8\" />\n                      <Line type=\"monotone\" dataKey=\"new_daily_deaths\" stroke=\"#82ca9d\" />\n                    </LineChart>\n\n                    <div className={classes.graphContainer}>\n                        <canvas\n                            id=\"myChart\"\n                            ref={this.chartRef}\n                        />\n                    </div>\n\n                  </div>\n\n          );\n    }\n\n    return (\n        <p>Loading graph...</p>\n      )\n  }\n\n}\n\nexport default Company;"]},"metadata":{},"sourceType":"module"}